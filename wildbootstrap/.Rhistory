library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X[!is.na(Y),]), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred2 = predict(sl, as.data.frame(X), onlySL = TRUE)
Ypred=pred2[[1]]
return(list("Ypred" = Ypred , "p" = p))
}
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
Rcpp::sourceCpp('repodir/RKHSmissing/kernel_machine/regression.cpp')
Y[is.na(Y)]=0
mu=res$Ypred
lambda=2
d=as.numeric(M/res$p)
W=(diag(d))
alphatilde=coef(Z,Y,W,lambda,mu)
alphatilde
hist(res$p)
mu=res$Ypred
lambda=2
d=as.numeric(M/res$p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde)
alphatilde
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde))
}
prediction=numeric(length(Ytilde));
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde))
}
plot(Yorig,prediction)
plot(Yorig~mu)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/res$p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde))
}
plot(Yorig~mu)
plot(Yorig,prediction)
Rcpp::sourceCpp('repodir/RKHSmissing/kernel_machine/regression.cpp')
Rcpp::sourceCpp('repodir/RKHSmissing/kernel_machine/regression.cpp')
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.75)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.75)
}
plot(Yorig~mu)
plot(Yorig,prediction)
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,1)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),1)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,10)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),10)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
eps=rnorm(n,0,1)
Y=2*(Z[,1])+eps
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(-1,0,0)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,1-p[i])
}
Yorig=Y
Y[!M]=NA
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/res$p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
plot(M)
plot(M,Yorig)
plot(Yorig,mu)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,20)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),20)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,10)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),10)
}
plot(Yorig~mu)
plot(Yorig,prediction)
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.05)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.05)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.6)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.6)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.6)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.6)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
plot(p~as.numeric(res$p))
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=diag(d)
alphatilde=coef(Z,Y,W,lambda,mu,3)
alphatilde=coef(Z,Y,W,lambda,mu,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
d
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,25)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),25)
}
plot(Yorig~mu)
plot(Yorig,prediction)
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
eps=rnorm(n,0,1)
Y=2*(Z[,1])+eps
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(-0.05,0,0)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,1-p[i])
}
Yorig=Y
Y[!M]=NA
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,25)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),25)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
lambda=1
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W
Rcpp::sourceCpp('repodir/RKHSmissing/kernel_machine/regression.cpp')
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,10)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),10)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,15)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),15)
}
plot(Yorig~mu)
plot(Yorig,prediction)
M
plot(M~Z[,1])
setwd("~/repodir/RKHSmissing/wildbootstrap")
