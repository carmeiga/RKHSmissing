list(min=0,max=10),
list(min=0,max=10)) )
Z2 <- rMvdc(200, myMvd)
Y=2*(Z2[,1]+Z2[,2])+Z2[,3]
colnames(Z2) <- c("x1", "x2", "x3")
pairs.panels(Z2)
myCop <- normalCopula(param=c(0.3,0.7,-0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z2 <- rMvdc(200, myMvd)
Y=2*(Z2[,1]+Z2[,2])+Z2[,3]
colnames(Z2) <- c("x1", "x2", "x3")
pairs.panels(Z2)
?normalCopula
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z2 <- rMvdc(200, myMvd)
Y=2*(Z2[,1]+Z2[,2])+Z2[,3]
colnames(Z2) <- c("x1", "x2", "x3")
pairs.panels(Z2)
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z2 <- rMvdc(200, myMvd)
Y=2*(Z2[,1]+Z2[,2])+Z2[,3]
colnames(Z2) <- c("x1", "x2", "x3")
pairs.panels(Z2)
cv_sl = CV.SuperLearner(Y = Y, X = as.data.frame(Z2), family = gaussian(),
V = 6,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
summary(cv_sl)
plot(cv_sl)
sl = SuperLearner(Y = y_train, X = x_train, family = gaussian(),
V = 5,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
sl = SuperLearner(Y = y_train, X = x_train, family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(sl, x_train, onlySL = TRUE)
View(pred)
plot(y_train~as.numeric(pred[[1]]))
summary(cv_sl)
plot(cv_sl)
?rbinom
p=c(0.2,0.1,0.4,0.3)
Y=rbinom(3,1,p)
library(copula)
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(200, myMvd)
Y=2*(Z[,1]+Z[,2])+Z[,3]
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
library(psych)
Z <- rMvdc(200, myMvd)
Y=2*(Z[,1]+Z[,2])+Z[,3]
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
Y=2*(Z[,1]+Z[,2])+Z[,3]
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(0,7,5)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(dot(x,beta), min = 0, max = 1)
}
library(math)
install.packages("gtools")
library(gtools)
beta=c(0,7,5)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(dot(x,beta), min = 0, max = 1)
}
beta=c(0,7,5)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
p
beta=c(3,2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
beta=c(3,2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
p
beta=c(-3,2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
p
beta=c(3,-2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
p
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
M
sl = SuperLearner(Y = y_train, X = x_train, family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm","SL.knn"))
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
sl = SuperLearner(Y = y_train, X = x_train, family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm","SL.knn"))
sl = SuperLearner(Y = M, X = as.data.frame(Z), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm","SL.knn"))
pred = predict(sl, as.data.frame(Z), onlySL = TRUE)
pred = predict(sl, Z, onlySL = TRUE)
pred = predict(sl, as.data.frame(Z), onlySL = TRUE)
Z
pairs.panels(Z)
new=<- rMvdc(n, myMvd)
new= rMvdc(n, myMvd)
new
pairs.panels(new)
pred = predict(sl, as.data.frame(new), onlySL = TRUE)
pred = predict(sl, as.data.frame(new), onlySL = TRUE)
x_train=data.frame(x1,x2,x3)
x1=runif(n,0,10)
x2=runif(n,0,10)
x3=runif(n,0,10)
x_train=data.frame(x1,x2,x3)
pred = predict(sl, x_train, onlySL = TRUE)
View(x_train)
names(x_train)
x_train
sl = SuperLearner(Y = M, X = as.data.frame(Z), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger")#, "SL.gam", "SL.ksvm","SL.knn"))
)
pred = predict(sl, x_train, onlySL = TRUE)
as.numeric(pred[[1]])
pred = predict(sl, as.data.frame(Z), onlySL = TRUE)
pred
plot(M~as.numeric(pred[[1]]))
sl = SuperLearner(Y = M, X = as.data.frame(Z), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(sl, as.data.frame(Z), onlySL = TRUE)
pred = predict(sl, as.data.frame(Z), onlySL = TRUE)
plot(M~as.numeric(pred[[1]]))
pred[[1]]
plot(p~as.numeric(pred[[1]]))
cv_sl = CV.SuperLearner(Y = M, X = as.data.frame(Z), family = binomial(),
V = 6,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
plot(cv_sl)
cv_sl = CV.SuperLearner(Y = M, X = as.data.frame(Z), family = binomial(),
V = 10,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
summary(cv_sl)
plot(cv_sl)
names(cv_sl)
cv_sl$SL.predict
NA
as.numeric(is.na(2))
as.numeric(is.na(x = nq))
as.numeric(is.na(x = NA))
pi
a=c(1,2,NA)
Ycomplete=a[!is.na(a)]
na.omit(a)
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = X, family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, X, onlySL = TRUE)
}
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = X, family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, X, onlySL = TRUE)
return(list("Ypred" = Ypred, "p" = p))
}
Y[!!M]=NA
y
Y
incomplete.reg(Z,Y)
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, X, onlySL = TRUE)
return(list("Ypred" = Ypred, "p" = p))
}
incomplete.reg(Z,Y)
X=W
X=Z
n=length(Y)
M=as.numeric(is.na(Y))
M
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
p
Ycomplete=na.omit(Y)
Ycomplete
Y
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X[!is.na(Y),]), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, X, onlySL = TRUE)
Ypred = predict(sl, as.data.frame(X), onlySL = TRUE)
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X[!is.na(Y),]), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, as.data.frame(X), onlySL = TRUE)
return(list("Ypred" = Ypred, "p" = p))
}
plot(p~as.numeric(res$p))
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
eps=rnorm(n,0,1)
Y=2*(Z[,1]+Z[,2])+Z[,3]+eps
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(3,-2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
M
Y[!!M]=NA
Y
res=incomplete.reg(Z,Y)
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X[!is.na(Y),]), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
Ypred = predict(sl, as.data.frame(X), onlySL = TRUE)
return(list("Ypred" = Ypred, "p" = p))
}
res=incomplete.reg(Z,Y)
warnings()
plot(p~as.numeric(res$p))
res$Ypred
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
incomplete.reg=function(X,Y) {
n=length(Y)
M=as.numeric(is.na(Y))
slmis = SuperLearner(Y = M, X = as.data.frame(X), family = binomial()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred = predict(slmis, as.data.frame(Z), onlySL = TRUE)
p=pred[[1]]
Ycomplete=na.omit(Y)
sl = SuperLearner(Y = Ycomplete, X = as.data.frame(X[!is.na(Y),]), family = gaussian()
,SL.library = c("SL.mean", "SL.glmnet", "SL.ranger", "SL.gam", "SL.ksvm"))
pred2 = predict(sl, as.data.frame(X), onlySL = TRUE)
Ypred=pred2[[1]]
return(list("Ypred" = Ypred , "p" = p))
}
res=incomplete.reg(Z,Y)
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
warnings()
beta=c(0.1,-0.2,0.3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
M
Y[!!M]=NA
Y
beta=c(0.1,-0.2,-0.3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
beta=c(1,-2,3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
beta=c(10,-2,3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
beta=c(1,-20,3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
beta=c(-1,-2,0.3)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
library("SuperLearner")
library(copula)
library(psych)
library(gtools)
library("ranger")
library("glmnet")
library("gam")
library("kernlab")
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
eps=rnorm(n,0,1)
Y=2*(Z[,1]+Z[,2])+Z[,3]+eps
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(3,-2,1)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,p[i])
}
Y[!!M]=NA
Y
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
Rcpp::sourceCpp('repodir/RKHSmissing/regression/regression.cpp')
library(Rcpp)
Rcpp::sourceCpp('repodir/RKHSmissing/regression/regression.cpp')
setwd("~/repodir/RKHSmissing/regression")
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
sourceCpp(regression.cpp)
sourceCpp('regression.cpp')
getwd()
Rcpp::sourceCpp('regression.cpp')
install.packages("RcppArmadillo")
library(RcppArmadillo)
library(Rcpp)
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
Rcpp::sourceCpp('regression.cpp')
